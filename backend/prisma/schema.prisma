// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @unique @default(uuid())
  email              String         @unique
  password           String
  refreshTokens      RefreshToken[]
  roles        Role[]   @relation("UserRoles")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  workflowsCreatedBy Workflow[]     @relation("WorkflowCreatedBy") // Reverse relationship with created workflows
  workflowsApproved  Workflow[]     @relation("WorkflowApprovers")
  requestsApproved   Request[]      @relation("RequestApprovers")
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Workflow {
  id        String      @id @unique @default(uuid())
  title     String
  name      String
  desc      String
  createdBy String   @map("createdBy") // References the User table's id
  creator   User     @relation("WorkflowCreatedBy", fields: [createdBy], references: [id])
  approvers User[]   @relation("WorkflowApprovers") // References an array of Users
  approvalType String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  requests    Request[]
}

model Request {
  requestID          String            @id @unique @default(uuid())
  requestName        String
  requestDescription String?
  attachments        String[]
  workflowType       Workflow      @relation(fields: [workflowTypeID], references: [id])
  workflowTypeID     String
  approvedBy         User[]         @relation("RequestApprovers")
  status             String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  users     User[]   @relation("UserRoles")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

